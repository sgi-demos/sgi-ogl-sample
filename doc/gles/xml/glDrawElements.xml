<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.2//EN" "DTD/docbook/docbookx.dtd">

<!--
  License Applicability. Except to the extent portions of this file are
  made subject to an alternative license as permitted in the SGI Free
  Software License B, Version 1.1 (the "License"), the contents of this
  file are subject only to the provisions of the License. You may not use
  this file except in compliance with the License. You may obtain a copy
  of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
  Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:

  http://oss.sgi.com/projects/FreeB

  Note that, as provided in the License, the Software is distributed on an
  "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
  DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
  CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
  PARTICULAR PURPOSE, AND NON-INFRINGEMENT.

  Original Code. The Original Code is: OpenGL ES Reference Manual,
  Version 1.0, released September 2003, developed by Silicon Graphics,
  Inc.  The Original Code is Copyright (c) 2003 Silicon Graphics, Inc.
  Copyright in any portions created by third parties is as indicated
  elsewhere herein.  All Rights Reserved.
-->

<refentry id="glDrawElements">
  <refmeta>
    <refentrytitle>glDrawElements</refentrytitle>
    <manvolnum>3G</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>glDrawElements</refname>
    <refpurpose>render primitives from array data</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>C Specification</title>

    <funcsynopsis>
      <funcprototype>
        <funcdef>void <function>glDrawElements</function></funcdef>
        <paramdef>GLenum <parameter>mode</parameter></paramdef>
        <paramdef>GLsizei <parameter>count</parameter></paramdef>
        <paramdef>GLenum <parameter>type</parameter></paramdef>
        <paramdef>const GLvoid * <parameter>indices</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>mode</parameter>
        </term>

        <listitem>
          <para>Specifies what kind of primitives to render.
          Symbolic constants 
          <constant>GL_POINTS</constant>, 
          <constant>GL_LINE_STRIP</constant>, 
          <constant>GL_LINE_LOOP</constant>, 
          <constant>GL_LINES</constant>, 
          <constant>GL_TRIANGLE_STRIP</constant>, 
          <constant>GL_TRIANGLE_FAN</constant>, and 
          <constant>GL_TRIANGLES</constant> are accepted.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>count</parameter>
        </term>

        <listitem>
          <para>Specifies the number of elements to be rendered.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>type</parameter>
        </term>

        <listitem>
          <para>Specifies the type of the values in 
          <parameter>indices</parameter>. Must be either
          <constant>GL_UNSIGNED_BYTE</constant> or 
          <constant>GL_UNSIGNED_SHORT</constant>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>indices</parameter>
        </term>

        <listitem>
          <para>Specifies a pointer to the location where the
          indices are stored.</para>
        </listitem>
      </varlistentry>
    </variablelist>


  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>
    <function>glDrawElements</function>

    specifies multiple geometric primitives with very few
    subroutine calls. You can prespecify separate arrays of
    vertices, normals, colors, and texture coordinates and use them
    to construct a sequence of primitives with a single call to 
    <function>glDrawElements</function>.</para>

    <para>When <function>glDrawElements</function> is called, it uses 
    <parameter>count</parameter> sequential indices from 
    <parameter>indices</parameter> 
    to lookup elements in enabled arrays to construct a sequence of
    geometric primitives. 
    <parameter>mode</parameter>
    specifies what kind of primitives are constructed, and how the
    array elements construct these primitives. If 
    <constant>GL_VERTEX_ARRAY</constant> 
    is not enabled, no geometric primitives are constructed.</para>
    <para>Vertex attributes that are modified by 
    <function>glDrawElements</function> have an unspecified value after 
    <function>glDrawElements</function>
    returns. For example, if <constant>GL_COLOR_ARRAY</constant>
    is enabled, the value of the current color is undefined after 
    <function>glDrawElements</function>
    executes. Attributes that aren't modified maintain their
    previous values.</para>
  </refsect1>

  <refsect1>
    <title>Errors</title>

    <para><constant>GL_INVALID_ENUM</constant> is generated if 
    <parameter>mode</parameter> is not an accepted value.</para>

    <para><constant>GL_INVALID_ENUM</constant> is generated if 
    <parameter>type</parameter> is not an accepted value.</para>

    <para><constant>GL_INVALID_VALUE</constant> is generated if 
    <parameter>count</parameter> is negative.</para>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <para>
    <citerefentry><refentrytitle>glClientActiveTexture</refentrytitle></citerefentry>, 
    <citerefentry><refentrytitle>glColorPointer</refentrytitle></citerefentry>, 
    <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry>, 
    <citerefentry><refentrytitle>glNormalPointer</refentrytitle></citerefentry>, 
    <citerefentry><refentrytitle>glTexCoordPointer</refentrytitle></citerefentry>, 
    <citerefentry><refentrytitle>glVertexPointer</refentrytitle></citerefentry> </para> </refsect1>
</refentry>
